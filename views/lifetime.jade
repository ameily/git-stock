extends layout

block head
  title Lifetime
  script(src='/vendor/d3/d3.js')
  script(src='/vendor/numeral/numeral.js')
  script(src='/vendor/moment/moment.js')
  
  style.
    path { 
      stroke: steelblue;
      stroke-width: 2;
      fill: none;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: grey;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }
    
    .summary {
      text-align: center;
    }
    
    .arc path {
      stroke: #fff;
    }

block content
  div.row
    div.col-md-12
      h1 Lifetime
      svg#timeline
      
      hr
  
  
  div.row
    div.col-md-3.summary#ageBlock
    div.col-md-3.summary#valueBlock
    div.col-md-3.summary#commitsBlock
    div.col-md-3.summary#contribsBlock
    
    hr
    
  div.row
    div.col-md-3.summary
      h2 ALoCA
      div#codeAge
    div.col-md-3.summary
      h2 Dividends
      div#dividends
    div.col-md-3.summary
      h2 Commits Vs. Merges
      div#commitVsMerge
    div.col-md-3.summary
      h2 Top Contributors
      div#topContribs
    


block foot
  script.
    function drawLifetime(data) {
      var margin = {
        top: 20,
        left: 80,
        right: 20,
        bottom: 30
      };
      
      var height = 300 - margin.top - margin.bottom
          width = $(".col-md-12").width() - margin.left - margin.right;
      
      var parseDate = d3.time.format("%Y%m%d").parse;
      
      var svg = d3.select("#timeline")
        .attr("width", "100%")
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      
      // x axis scale
      var x = d3.time.scale()
        .range([0, width]);
      
      // y value axis scale
      var valueY = d3.scale.linear()
        .range([height, 0]);
      
      // x axis
      var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");
      
      // y value axis
      var valueAxis = d3.svg.axis()
        .scale(valueY)
        .orient("left");
      
      // value line
      var valueLine = d3.svg.line()
        .x(function(d) { return x(d.date); })
        .y(function(d) { return valueY(d.value); });
      
      // create Date objects from their string value
      var maxValue = 0;
      data.forEach(function(d) {
        d.date = parseDate(d.date);
        maxValue = d.value < maxValue ? maxValue : d.value;
      });
      
      // set the Y axis tick format
      //- if(maxValue > 30000) {
      //-   valueAxis.tickFormat(function(d) {
      //-     return (d / 1000).toFixed(1).toString() + "K";
      //-   });
      //- }
      valueAxis.tickFormat(function(d) {
        return numeral(d).format('$0,0[.]0a');
      });
      
      // axis domains
      x.domain(d3.extent(data, function(d) { return d.date; }));
      valueY.domain([0, d3.max(data, function(d) { return d.value; })]);
      
      // value line
      svg.append("path")
        .datum(data)
        .attr('d', valueLine);
      
      // x axis
      svg.append("g")
        .attr('class', "x axis")
        .attr('transform', 'translate(0, ' + height + ')')
        .call(xAxis);
      
      // y value axis
      svg.append('g')
        .attr('class', 'y axis')
        .call(valueAxis);
      
      // y commit axis scale
      //- var commitY = d3.scale.linear()
      //-   .range([height, 0]);
      
      //- commitY.domain([0, d3.max(data, function(d) { return d.commits; })]);
        
      // y commit axis
      //- var commitAxis = d3.svg.axis()
      //-   .scale(commitY)
      //-   .orient("right");
      
      // commit line
      //- var commitLine = d3.svg.line()
      //-   .x(function(d) { return x(d.date); })
      //-   .y(function(d) { return commitY(d.commits); });
      
      // commit line
      //- svg.append("path")
      //-   .datum(data)
      //-   .attr('d', commitLine);
      
      // y commit axis
      //- svg.append('g')
      //-   .attr('class', 'y axis')
      //-   .attr('transform', 'translate(' + width + ', 0)')
      //-   .call(commitAxis);
    }
    
    function updateLatest(data) {
      var parseDate = d3.time.format("%Y%m%d").parse;
      var value = data.lifetime.value;
      
      //- if(value > 1000) {
      //-   value = (value / 1000).toFixed(2).toString() + "K";
      //- } else {
      //-   value = value.toString();
      //- }
      
      $("#valueBlock").append(
        $("<h2>").text(numeral(value).format('($0.00a)'))
      ).append(
        $("<h4>").text("Value")
      );
      
      $("#contribsBlock").append(
        $("<h2>").text(numeral(data.lifetime.stocks.length).format('0,0[.]00a'))
      ).append(
        $("<h4>").text("Contributors")
      );
      
      $("#commitsBlock").append(
        $("<h2>").text(numeral(data.lifetime.commits).format('0,0[.]00a'))
      ).append(
        $("<h4>").text("Commits")
      );
      
      var firstCommit = d3.min(data.lifetime.stocks, function(d) { return parseDate(d.firstCommitDate); });
      var ageMs = new Date() - firstCommit;
      var age = (ageMs / 1000 / 60 / 60 / 24);
      
      if(age > 400) {
        age = (age / 365).toFixed(2) + " years";
      } else {
        age = age.toFixed(0) + " days";
      }
      
      $("#ageBlock").append(
        $("<h2>").text(age)
      ).append(
        $("<h4>").text("Repo Age")
      );
    }
    
    function updateTopContribs(data) {
      var margin = 20;
      var width = $("#topContribs").width();
      var height = 200;
      var radius = (height < width ? height : width) / 2;
      var color = d3.scale.category10();
      var totalValue = data.lifetime.value;
      
      var stocks = data.lifetime.stocks.sort(function(a, b) {
        return a.value < b.value ? 1 : (a.value == b.balue ? 0 : -1);
      });
      
      if(stocks.length > 5) {
        var top4 = 0;
        
        for(var i = 0; i < 4; ++i) {
          top4 += stocks[i].value;
        }
        
        stocks = [
          stocks[0],
          stocks[1],
          stocks[2],
          stocks[3],
          {
            value: totalValue - top4,
            email: null,
            name: "Other"
          }
        ];
      }
      
      var arc = d3.svg.arc()
        .outerRadius(radius)
        .innerRadius(0);
      
      var arcHover = d3.svg.arc()
        .outerRadius(radius + 10)
        .innerRadius(0);
      
      var pie = d3.layout.pie()
        .sort(null)
        .value(function(d) { return d.value; });
      
      var svg = d3.select("#topContribs").append("svg")
        .attr('width', width)
        .attr('height', height + 20)
        .append("g")
          .attr("transform", "translate(" + (width / 2) + ", " + (height / 2 + 10) + ")");
      
      var g = svg.selectAll(".arc")
        .data(pie(stocks))
        .enter().append("g")
          .attr("class", "arc");
      
      g.append("path")
        .attr('d', arc)
        .style("fill", function(d, i) {
          return color(i); 
        }).attr('data-email', function(d, i) {
          return d.email;
        })
      
      $tbody = $("<tbody>");
      
      stocks.forEach(function(stock, i) {
        $tbody.append(
          $("<tr>").append(
            $("<th class='text-left'>").text(stock.name)
          ).append(
            $("<td class='text-right'>").text(numeral(stock.value).format("$0,0a"))
          ).append(
            $("<td class='text-right'>").text(numeral(stock.value / totalValue).format('0%'))
          ).css('color', color(i)).hover(function() {
            $(this).css('background-color', $(this).css('color')).css("color", "#fff");
            g.filter(function(d, subi) { return i == subi; }).select("path")
              .transition()
                .duration(500)
                .attr('d', arcHover);
          }, function() {
            $(this).css("color", $(this).css('background-color')).css('background-color', 'rgba(0, 0, 0, 0)');
            g.filter(function(d, subi) { return i == subi; }).select("path")
              .transition()
              .duration(500)
              .attr('d', arc);
          })
        );
      });
      
      $("#topContribs").append(
        $("<table class='table'>").append($tbody)
      );
    }
    
    function drawCommitVsMerge(data) {
      var margin = 20;
      var width = $("#commitVsMerge").width();
      var height = 200;
      var radius = (height < width ? height : width) / 2;
      var color = function(d, i) {
        // 0 == commit, 1 == merge
        return i == 0 ? "#5bc0de" : "#337ab7";
      };
      
      var commitVsMerge = [
        { label: "Commits", count: data.lifetime.commits },
        { label: "Merges", count: data.lifetime.merges }
      ];
      
      var arc = d3.svg.arc()
        .outerRadius(radius)
        .innerRadius(0);
      
      var arcHover = d3.svg.arc()
        .outerRadius(radius + 10)
        .innerRadius(0);
      
      var pie = d3.layout.pie()
        .sort(null)
        .value(function(d) { return d.count; });
      
      var svg = d3.select("#commitVsMerge").append("svg")
        .attr('width', width)
        .attr('height', height + 20)
        .append("g")
          .attr("transform", "translate(" + (width / 2) + ", " + (height / 2 + 10) + ")");
      
      var g = svg.selectAll(".arc")
        .data(pie(commitVsMerge))
        .enter().append("g")
          .attr("class", "arc");
      
      g.append("path")
        .attr('d', arc)
        .style("fill", color);
      
    }
    
    function drawDividends(data) {
      var margin = 20;
      var width = $("#dividends").width();
      var height = 200;
      var radius = (height < width ? height : width) / 2;
      var color = d3.scale.category20b();
      var totalValue = data.lifetime.value;
      
      var dividens = data.lifetime.dividends.sort(function(a, b) {
        return a.value < b.value ? 1 : (a.value == b.balue ? 0 : -1);
      });
      
      if(dividends.length > 5) {
        var top4 = 0;
        
        for(var i = 0; i < 4; ++i) {
          top4 += dividens[i].value;
        }
        
        dividens = [
          dividens[0],
          dividens[1],
          dividens[2],
          dividens[3],
          {
            value: totalValue - top4,
            id: "Other"
          }
        ];
      }
      
      var arc = d3.svg.arc()
        .outerRadius(radius)
        .innerRadius(0);
      
      var arcHover = d3.svg.arc()
        .outerRadius(radius + 10)
        .innerRadius(0);
      
      var pie = d3.layout.pie()
        .sort(null)
        .value(function(d) { return d.value; });
      
      var svg = d3.select("#dividends").append("svg")
        .attr('width', width)
        .attr('height', height + 20)
        .append("g")
          .attr("transform", "translate(" + (width / 2) + ", " + (height / 2 + 10) + ")");
      
      var g = svg.selectAll(".arc")
        .data(pie(dividens))
        .enter().append("g")
          .attr("class", "arc");
      
      g.append("path")
        .attr('d', arc)
        .style("fill", function(d, i) {
          return color(i); 
        });
      
      $tbody = $("<tbody>");
      
      dividens.forEach(function(dividend, i) {
        $tbody.append(
          $("<tr>").append(
            $("<th class='text-left'>").text(dividend.id)
          ).append(
            $("<td class='text-right'>").text(numeral(dividend.value).format("$0,0a"))
          ).append(
            $("<td class='text-right'>").text(numeral(dividend.value / totalValue).format('0%'))
          ).css('color', color(i)).hover(function() {
            $(this).css('background-color', $(this).css('color')).css("color", "#fff");
            g.filter(function(d, subi) { return i == subi; }).select("path")
              .transition()
                .duration(500)
                .attr('d', arcHover);
          }, function() {
            $(this).css("color", $(this).css('background-color')).css('background-color', 'rgba(0, 0, 0, 0)');
            g.filter(function(d, subi) { return i == subi; }).select("path")
              .transition()
              .duration(500)
              .attr('d', arc);
          })
        );
      });
      
      $("#dividends").append(
        $("<table class='table'>").append($tbody)
      );
    }
    
    $(document).ready(function() {
      d3.json('/api/v1/lifetime.json', function(err, data) {
        drawLifetime(data);
      });
      
      d3.json('/api/v1/latest.json', function(err, data) {
        updateLatest(data);
        updateTopContribs(data);
        drawCommitVsMerge(data);
        drawDividends(data);
      });
    });
